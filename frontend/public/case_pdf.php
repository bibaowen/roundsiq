<?php
// case_pdf.php
require_once "auth.php";
require_once "db.php";

// Adjust if your FPDF lives elsewhere (e.g., require(__DIR__."/bin/fpdf.php");)
require_once "../fdpf-folder/fpdf.php";


$case_id = (int)($_GET['id'] ?? 0);
if ($case_id <= 0) { http_response_code(400); exit("Invalid case id."); }

// ---------- Load Case + Patient ----------
$sql = "
  SELECT
    ci.id, ci.patient_id, ci.symptoms, ci.history, ci.lab_results, ci.note, ci.created_at,
    p.name AS patient_name, p.age AS patient_age, p.gender AS patient_gender
  FROM clinical_inputs ci
  LEFT JOIN patients p ON p.id = ci.patient_id
  WHERE ci.id = :id
  LIMIT 1
";
$stmt = $pdo->prepare($sql);
$stmt->execute([':id'=>$case_id]);
$case = $stmt->fetch(PDO::FETCH_ASSOC);
if (!$case) { http_response_code(404); exit("Case not found."); }

// ---------- Latest AI ----------
$aiStmt = $pdo->prepare("
  SELECT summary, full_response, created_at
  FROM ai_responses
  WHERE clinical_input_id = :id
  ORDER BY created_at DESC
  LIMIT 1
");
$aiStmt->execute([':id'=>$case_id]);
$ai = $aiStmt->fetch(PDO::FETCH_ASSOC);

// ---------- Doctor Notes ----------
$notesStmt = $pdo->prepare("
  SELECT doctor_name, note, created_at
  FROM case_notes
  WHERE clinical_input_id = :id
  ORDER BY created_at DESC
");
$notesStmt->execute([':id'=>$case_id]);
$notes = $notesStmt->fetchAll(PDO::FETCH_ASSOC);

// ---------- Helpers ----------
function t($s) {
  $s = (string)$s;

  // Normalize some common Unicode punctuation that otherwise breaks
  $map = [
    "’"=>"'", "‘"=>"'", "“"=>'"', "”"=>'"',
    "–"=>"-", "—"=>"--", "•"=>"•", "…"=>"..."
  ];
  $s = strtr($s, $map);

  // Strip emoji and other symbols outside BMP that Windows-1252 can't represent
  $s = preg_replace('/[\x{1F300}-\x{1FAFF}]/u', '', $s); // emoji range
  $s = preg_replace('/[\x{2000}-\x{200F}]/u', ' ', $s);  // misc spaces/ZW chars

  // Convert to Windows-1252 (covers bullet, smart quotes, etc.)
  $out = @iconv('UTF-8', 'WINDOWS-1252//TRANSLIT//IGNORE', $s);
  if ($out === false) {
    // Fallback if iconv fails
    $out = @mb_convert_encoding($s, 'Windows-1252', 'UTF-8');
    if ($out === false) $out = utf8_decode($s); // last resort
  }
  return $out;
}


// Brand colors
$TEAL   = [0, 77, 77];       // #004d4d
$ORANGE = [211, 84, 0];      // #d35400
$LTGREY = [246, 248, 251];   // background

class PDF extends FPDF {
  public $logoPath;
  public $teal;
  public $orange;

  function Header() {
    // Logo + Title bar
    $this->SetFillColor($this->teal[0], $this->teal[1], $this->teal[2]);
    $this->Rect(0, 0, 210, 20, 'F');

    if (is_file($this->logoPath)) {
      // Left: logo
      $this->Image($this->logoPath, 10, 4, 12); // w=12mm
    }

    // Title
    $this->SetXY(25, 6);
    $this->SetTextColor(255,255,255);
    $this->SetFont('Arial','B',14);
    $this->Cell(0,6, t('RoundsIQ • Case Summary'), 0, 1, 'L');

    // Subtitle
    $this->SetX(25);
    $this->SetFont('Arial','',10);
    $this->Cell(0,6, t('AI-assisted clinical review'), 0, 1, 'L');

    $this->Ln(4);
  }

  function Footer() {
    $this->SetY(-15);
    $this->SetFont('Arial','I',8);
    $this->SetTextColor(120,120,120);
    $this->Cell(0,10, t('Generated by RoundsIQ • Page ').$this->PageNo().'/{nb}', 0, 0, 'C');
  }

  // Section header with orange accent
  function SectionHeader($title) {
    $this->SetTextColor(255,255,255);
    $this->SetFillColor($this->orange[0], $this->orange[1], $this->orange[2]);
    $this->SetFont('Arial','B',11);
    $this->Cell(0,8, t($title), 0, 1, 'L', true);
    $this->Ln(1.5);
  }

  // Label/value block
  function LabeledBlock($label, $text) {
    $this->SetFont('Arial','B',10);
    $this->SetTextColor(50,50,50);
    $this->Cell(0,6, t($label), 0, 1, 'L');

    $this->SetFont('Arial','',10);
    $this->SetTextColor(20,20,20);
    // MultiCell for wrapping
    $this->MultiCell(0,6, t($text !== '' ? $text : '—'));
    $this->Ln(1);
  }
}

$pdf = new PDF();
$pdf->logoPath = __DIR__ . 'images/logo.jpg';
$pdf->teal = $TEAL;
$pdf->orange = $ORANGE;

$pdf->AliasNbPages();
$pdf->AddPage();
$pdf->SetAutoPageBreak(true, 18);

// Header meta box
$pdf->SetTextColor(0,0,0);
$pdf->SetFont('Arial','',10);

// Top meta (case id / created / printed / doctor)
$printedAt = date('Y-m-d H:i');
$doctor = isset($_SESSION['doctor_name']) ? $_SESSION['doctor_name'] : '—';

$pdf->SetFillColor(240,243,247);
$pdf->SetDrawColor(230,235,240);
$pdf->SetLineWidth(0.2);
$pdf->Cell(0, 10, '', 1, 1, 'L', true);

$pdf->SetXY(10, 28);
$pdf->SetFont('Arial','',10);
$pdf->Cell(95,6, t('Case ID: '.$case['id']), 0, 0, 'L');
$pdf->Cell(95,6, t('Created: '.date('Y-m-d H:i', strtotime($case['created_at']))), 0, 1, 'R');
$pdf->SetX(10);
$pdf->Cell(95,6, t('Doctor: '.$doctor), 0, 0, 'L');
$pdf->Cell(95,6, t('Printed: '.$printedAt), 0, 1, 'R');
$pdf->Ln(3);

// Patient
$pdf->SectionHeader('Patient');
$pdf->SetFont('Arial','',10);
$pdf->LabeledBlock('Name',   (string)($case['patient_name'] ?? ''));
$pdf->LabeledBlock('Age',    $case['patient_age'] !== null ? (string)$case['patient_age'] : '—');
$pdf->LabeledBlock('Gender', (string)($case['patient_gender'] ?? '—'));

// Clinical Note
$pdf->SectionHeader('Clinical Note');
$pdf->LabeledBlock('Symptoms',    (string)($case['symptoms'] ?? ''));
$pdf->LabeledBlock('History',     (string)($case['history'] ?? ''));
$pdf->LabeledBlock('Lab Results', (string)($case['lab_results'] ?? ''));
$pdf->LabeledBlock('Free-Text Note', (string)($case['note'] ?? ''));

// AI Summary
$pdf->SectionHeader('AI Summary');
if ($ai && (!empty($ai['summary']) || !empty($ai['full_response']))) {
  $summary = trim((string)($ai['summary'] ?? ''));
  $full    = trim((string)($ai['full_response'] ?? ''));
  $aiTime  = date('Y-m-d H:i', strtotime($ai['created_at']));

  $pdf->SetFont('Arial','I',9);
  $pdf->SetTextColor(100,100,100);
  $pdf->Cell(0,6, t('Latest run: '.$aiTime), 0, 1, 'L');
  $pdf->Ln(1);

  $pdf->SetTextColor(20,20,20);
  $pdf->SetFont('Arial','',10);
  if ($summary !== '') {
    $pdf->LabeledBlock('Summary', $summary);
  } else {
    $pdf->LabeledBlock('Summary', '—');
  }

  if ($full !== '') {
    // Add “Full Response” but avoid huge pages; trim very long text
    $maxChars = 12000; // safety
    if (mb_strlen($full) > $maxChars) {
      $full = mb_substr($full, 0, $maxChars) . "\n[truncated]";
    }
    $pdf->LabeledBlock('Full Response', $full);
  }
} else {
  $pdf->SetFont('Arial','',10);
  $pdf->MultiCell(0,6, t('No AI response available for this case.'));
  $pdf->Ln(1);
}

// Doctor Review Notes
$pdf->SectionHeader('Doctor Review Notes');
if (!$notes) {
  $pdf->SetFont('Arial','',10);
  $pdf->MultiCell(0,6, t('No notes added.'));
} else {
  foreach ($notes as $n) {
    $hdr = trim(($n['doctor_name'] ?: 'Doctor').' • '.date('Y-m-d H:i', strtotime($n['created_at'])));
    $pdf->SetFont('Arial','B',10);
    $pdf->SetTextColor($TEAL[0], $TEAL[1], $TEAL[2]);
    $pdf->MultiCell(0,6, t($hdr));
    $pdf->SetFont('Arial','',10);
    $pdf->SetTextColor(20,20,20);
    $pdf->MultiCell(0,6, t((string)$n['note']));
    $pdf->Ln(1);
  }
}

$filename = "case-{$case['id']}.pdf";
$pdf->Output('I', $filename); // inline view; use 'D' to force download
